/***************************************************************************
 * Copyright (C) 2016 Reiner Jung
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ***************************************************************************/
grammar de.cau.cs.se.geco.architecture.Architecture with org.eclipse.xtext.common.Terminals

generate architecture "http://www.cau.de/cs/se/geco/architecture/Architecture"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

GecoModel:
	'package' name=QualifiedName
	imports+=Import*
	registeredRootClass+=RegisteredRootClass*
	models+=ModelSequence*	
	fragments+=Fragment*
;

Import:
	'import' importedNamespace = [types::JvmType|QualifiedName]
;

RegisteredRootClass:
	'register' name=ID (importedNamespace = [types::JvmType|QualifiedName] |(isText?='text' extension=STRING))
;

ModelSequence:
	'model' modifier=ModelModifier type=ModelType models+=Model (',' models+=Model)*
;

enum ModelModifier:
	INPUT = 'in' |
	OUTPUT = 'out' |
	INTERMEDIATE = 'io'
;

Model:
	name=ID 
;

Fragment:
	Generator | Weaver
;

Weaver:
	'weave' reference=[types::JvmType|ID]  
		(sourceModel=SourceModelSelector|'link')
		aspectModel=AspectModel
		('=>' targetModel=TargetModel)?
;

AspectModel:
	CombinedModel |
	SeparateModels
;

SeparateModels:
	'pointcut' pointcut=TargetModel 'advice' advice=CombinedModel
;

CombinedModel:
	TargetModel | Generator 
;
	
Generator:
	'generate' reference=[types::JvmType|ID] 
		('(' sourceAuxModels+=SourceModelSelector (',' sourceAuxModels+=SourceModelSelector)* ')')?
		'source' sourceModel=SourceModelSelector
		('target' targetModel=TargetModel)?
		('trace'
			('out' targetTraceModel=TargetTraceModel)?
			('in' sourceTraceModels+=TraceModelReference (',' sourceTraceModels+=TraceModelReference)*)?
		)?
;


SourceModelSelector: 
	reference=[Model|ID]  ('[' constraint=ConstraintExpression ']')? ('/' property=NodeProperty)? | 
	{SourceModelSelector} 'null' 
;

TargetModel: {TargetModel}
	(reference=[Model|ID])
;

ModelType:
	target=[RegisteredRootClass|ID] ('/' property=NodeProperty)? (collection?='[]')?
;

NodeProperty:
	property=[types::JvmMember|ID] ('[' constraint=ConstraintExpression ']')? ('/' subProperty=NodeProperty)? 
;

ConstraintExpression:
	CompareExpression (=>({ConstraintExpression.left=current} operator=LogicOperator) right=ConstraintExpression)?
;

CompareExpression:
	BasicConstraint (=>({CompareExpression.left=current} comparator=Comparator) right=BasicConstraint)?
;

BasicConstraint:
	ParenthesisConstraint |
	Operand |
	Negation
;

Negation:
	'!' constraint = ConstraintExpression
;

ParenthesisConstraint:
	'(' constraint = ConstraintExpression ')'
;

Operand:
	Literal | NodeProperty | InstanceOf
;

InstanceOf:
	'is' type = [types::JvmType|ID] 	
;

TargetTraceModel:
	TraceModel | 'use' TraceModelReference
;

TraceModelReference:
	traceModel = [TraceModel|ID]
;

TraceModel:
	name=ID '<' nodeSetRelations+=NodeSetRelation+ '>'
;

NodeSetRelation:
	'(' 
		sourceNodes+=NodeType (',' sourceNodes+=NodeType)*
	':' 
		targetNodes+=NodeType (',' targetNodes+=NodeType)* 
	')'
;

NodeType: type = [types::JvmType|ID] ;

// -----------------------------------
// Literal

Literal:
	StringLiteral | IntLiteral | FloatLiteral | BooleanLiteral | ArrayLiteral
;

ArrayLiteral:
	'{' literals+=Literal (',' literals+=Literal)* '}'
;

StringLiteral:
	value=STRING
;

IntLiteral:
	value=INT
;

FloatLiteral:
	value=FLOAT
;

BooleanLiteral: 
	value=BOOLEAN
;

// -----------------------------------
// Terminals

enum LogicOperator:
	AND = '&' |
	OR = '|'
;

enum Comparator:
	EQ = '==' |
	NE = '!=' |
	GR = '>' |
	LW = '<' |
	GE = '>=' |
	LE = '<=' |
	LIKE = '~'
;

QualifiedName:
  ID (=>'.' ID)*;

QualifiedNameWithWildcard:
	QualifiedName ('.' '*')?
;

// terminals
terminal fragment DIGIT :
    '0'..'9';
   
// make sure the Float rule does not shadow the INT rule
terminal FLOAT:
    '-'? DIGIT+ ('.' DIGIT*) (("e"|"E") ("+"|"-")? DIGIT+)? 'f'? |
    '-'? DIGIT+ 'f';
    
// introduce boolean values
terminal BOOLEAN:
    'true' | 'false';